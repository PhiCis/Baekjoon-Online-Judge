#include<bits/stdc++.h>
using namespace std;
#define INF 2000000000

int main()
{
	int T;
	scanf("%d", &T);
	while(T--)
	{
		int N, W, A[10010][2], ANS=INF;
		scanf("%d%d", &N, &W);
		for(int i=1;i<=N;i++)
		{
			scanf("%d", &A[i][0]);
		}
		for(int i=1;i<=N;i++)
		{
			scanf("%d", &A[i][1]);
		}
		
		/*
		V[i][0]
		--
		  |
		--
		|
		
		V[i][1]
		|
		--
		  |
		--
		
		V[i][2]
		--
		  |
		  |
		--
		*/
		
		/*
		CASE 1:
		(N) | (1)
		(N) | (1)
		*/
		{
			int V[10010][3]={0};
			V[1][0]=V[1][1]=1;
			V[1][2]=(A[1][0]+A[1][1]<=W)?1:2;
			for(int i=2;i<=N;i++)
			{
				V[i][0]=min((A[i][0]+A[i-1][0]<=W?V[i-1][1]:INF), V[i-1][2])+1;
				V[i][1]=min((A[i][1]+A[i-1][1]<=W?V[i-1][0]:INF), V[i-1][2])+1;
				V[i][2]=min((A[i][0]+A[i][1]<=W?V[i-1][2]:INF), min(V[i][0], V[i][1]))+1;
				if(A[i][0]+A[i-1][0]<=W&&A[i][1]+A[i-1][1]<=W) V[i][2]=min(V[i][2], V[i-2][2]+2);
				if(A[i][1]+A[i-1][1]<=W) V[i][2]=min(V[i][2], V[i-1][0]+2);
				if(A[i][0]+A[i-1][0]<=W) V[i][2]=min(V[i][2], V[i-1][1]+2);
			}
			ANS=min(ANS, V[N][2]);
		}
		
		/*
		CASE 2:
		|(N) (1)|
		(N) | (1)
		*/
		if(N>=2&&A[1][0]+A[N][0]<=W)
		{
			int V[10010][3]={0};
			V[2][0]=3;
			V[1][0]=1;
			V[2][1]=(A[1][1]+A[2][1]<=W)?2:3;
			V[1][2]=2;
			for(int i=2;i<=N;i++)
			{
				if(i>2) V[i][0]=min((A[i][0]+A[i-1][0]<=W?V[i-1][1]:INF), V[i-1][2])+1;
				if(i>2) V[i][1]=min((A[i][1]+A[i-1][1]<=W?V[i-1][0]:INF), V[i-1][2])+1;
				V[i][2]=min((A[i][0]+A[i][1]<=W?V[i-1][2]:INF), min(V[i][0], V[i][1]))+1;
				if(i>2&&A[i][0]+A[i-1][0]<=W&&A[i][1]+A[i-1][1]<=W) V[i][2]=min(V[i][2], V[i-2][2]+2);
				if(A[i][1]+A[i-1][1]<=W) V[i][2]=min(V[i][2], V[i-1][0]+2);
				if(i>2&&A[i][0]+A[i-1][0]<=W) V[i][2]=min(V[i][2], V[i-1][1]+2);
			}
			ANS=min(ANS, V[N][1]);
		}
		
		
		/*
		CASE 3:
		(N) | (1)
		|(N) (1)|
		*/
		if(N>=2&&A[1][1]+A[N][1]<=W)
		{
			int V[10010][3]={0};
			V[2][0]=(A[1][0]+A[2][0]<=W)?2:3;
			V[2][1]=3;
			V[1][1]=1;
			V[1][2]=2;
			for(int i=2;i<=N;i++)
			{
				if(i>2) V[i][0]=min((A[i][0]+A[i-1][0]<=W?V[i-1][1]:INF), V[i-1][2])+1;
				if(i>2) V[i][1]=min((A[i][1]+A[i-1][1]<=W?V[i-1][0]:INF), V[i-1][2])+1;
				V[i][2]=min((A[i][0]+A[i][1]<=W?V[i-1][2]:INF), min(V[i][0], V[i][1]))+1;
				if(i>2&&A[i][0]+A[i-1][0]<=W&&A[i][1]+A[i-1][1]<=W) V[i][2]=min(V[i][2], V[i-2][2]+2);
				if(i>2&&A[i][1]+A[i-1][1]<=W) V[i][2]=min(V[i][2], V[i-1][0]+2);
				if(A[i][0]+A[i-1][0]<=W) V[i][2]=min(V[i][2], V[i-1][1]+2);
			}
			ANS=min(ANS, V[N][0]);
		}
		
		
		/*
		CASE 4:
		|(N) (1)|
		|(N) (1)|
		*/
		if(N>=2&&A[1][0]+A[N][0]<=W&&A[1][1]+A[N][1]<=W)
		{
			int V[10010][3]={0};
			V[2][0]=V[2][1]=3;
			V[1][2]=2;
			for(int i=2;i<N;i++)
			{
				if(i>2) V[i][0]=min((A[i][0]+A[i-1][0]<=W?V[i-1][1]:INF), V[i-1][2])+1;
				if(i>2) V[i][1]=min((A[i][1]+A[i-1][1]<=W?V[i-1][0]:INF), V[i-1][2])+1;
				V[i][2]=min((A[i][0]+A[i][1]<=W?V[i-1][2]:INF), min(V[i][0], V[i][1]))+1;
				if(i>2&&A[i][0]+A[i-1][0]<=W&&A[i][1]+A[i-1][1]<=W) V[i][2]=min(V[i][2], V[i-2][2]+2);
				if(i>2&&A[i][1]+A[i-1][1]<=W) V[i][2]=min(V[i][2], V[i-1][0]+2);
				if(i>2&&A[i][0]+A[i-1][0]<=W) V[i][2]=min(V[i][2], V[i-1][1]+2);
			}
			ANS=min(ANS, V[N-1][2]);
		}
		printf("%d\n", ANS);
	}
}
